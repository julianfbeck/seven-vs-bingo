// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Example {
    id String @id @default(cuid())
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.VarChar(500)
    access_token             String?  @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          String?   @default("user")
    accounts      Account[]
    sessions      Session[]
    Ranking       Ranking?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Projection {
    id            String       @id @default(cuid())
    text          String
    createdAt     DateTime     @default(now())
    description   String
    isApproved    Boolean      @default(false)
    hasBecomeTrue Boolean      @default(false)
    difficulty    Int          @default(0)
    bingoEntries  BingoEntry[]
}

model Ranking {
    id                    String   @id @default(cuid())
    createdAt             DateTime @default(now())
    candidateOneRanking   Int
    candidateTwoRanking   Int
    candidateThreeRanking Int
    candidateFourRanking  Int
    candidateFiveRanking  Int
    candidateSixRanking   Int
    candidateSevenRanking Int
    userId                String   @unique
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BingoEntry {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    userId       String
    position     Int
    projectionId String
    projection   Projection @relation(fields: [projectionId], references: [id], onDelete: Cascade)

    @@unique([position, userId])
    @@unique([projectionId, userId])
}
