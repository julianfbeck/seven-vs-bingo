import type { GetServerSideProps, NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";
import { CreateBoard } from "../lib/createBoard";
import { Field } from "../lib/Field";
import Navbar from "../lib/navbar";
import Points from "../lib/Points";
import { trpc } from "../utils/trpc";

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};
const Bingo: NextPage = () => {
  const {
    data: entries,
    isLoading,
    refetch,
  } = trpc.useQuery(["auth.bingoEntriesget"]);
  const { data: points } = trpc.useQuery(["auth.points.get"]);
  const fields = [
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
    22, 23, 24, 25,
  ];

  const getProjection = (field: number) => {
    return entries?.find((entry) => entry.position === field)?.projection;
  };
  return (
    <>
      <Navbar />
      <Head>
        <title>Seven vs. Wild Bingo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen bg-gradient-to-b from-black to-slate-900">
        <div className="py-3 px-4 mx-auto max-w-screen-lg lg:py-10 lg:px-12">
          <h1 className="text-4xl font-extrabold tracking-tight leading-none text-gray-900 md:text-5xl lg:text-6xl dark:text-white">
            Dein Board
          </h1>
        </div>
        <CreateBoard />
        <div className="max-w-screen-sm mx-auto  container p-2">
          <div className="mx-auto  container ">
            <div className="grid grid-cols-5 gap-2 gap-y-0.5">
              {!isLoading &&
                fields.map((field) => (
                  <Field
                    key={field}
                    fieldNumber={field}
                    projection={getProjection(field)}
                    onUpdate={refetch}
                  />
                ))}
            </div>
          </div>
        </div>
        {points && entries && <Points entries={entries} points={points} />}
      </main>
    </>
  );
};

export default Bingo;
