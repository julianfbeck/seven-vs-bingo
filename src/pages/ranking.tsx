/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { GetServerSideProps, NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import Navbar from "../lib/navbar";
import { trpc } from "../utils/trpc";

type candidate = {
  name: string;
  days: number;
  isSelected: boolean;
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};
const candidatesTemplate: candidate[] = [
  { name: "Fritz", days: 0, isSelected: false },
  { name: "Otto", days: 0, isSelected: false },
  { name: "Sascha", days: 0, isSelected: false },
  { name: "Knossi", days: 0, isSelected: false },
  { name: "Sarah", days: 0, isSelected: false },
  { name: "Nova", days: 0, isSelected: false },
  { name: "Joris", days: 0, isSelected: false },
];

const buttons = [
  { name: "1", value: 1 },
  { name: "2", value: 2 },
  { name: "3", value: 3 },
  { name: "4", value: 4 },
  { name: "5", value: 5 },
  { name: "6", value: 6 },
  { name: "7", value: 7 },
];

const Ranking: NextPage = () => {
  const { data: ranking } = trpc.useQuery(["auth.ranking.get"], {});
  const ctx = trpc.useContext();
  const insertRanking = trpc.useMutation("auth.ranking.Insert", {
    onMutate: () => {
      ctx.cancelQuery(["projection.getAll"]);

      const optimisticUpdate = ctx.getQueryData(["auth.ranking.get"]);
      if (optimisticUpdate) {
        ctx.setQueryData(["auth.ranking.get"], optimisticUpdate);
      }
    },
    onSettled: () => {
      ctx.invalidateQueries(["auth.ranking.get"]);
    },
  });
  const [candidates, setCandidates] = useState<candidate[]>(candidatesTemplate);

  useEffect(() => {
    if (ranking && !insertRanking.isLoading && insertRanking.isIdle) {
      const updatedCandidate = [...candidatesTemplate];
      updatedCandidate[0]!.days = ranking.candidateOneRanking;
      updatedCandidate[1]!.days = ranking.candidateTwoRanking;
      updatedCandidate[2]!.days = ranking.candidateThreeRanking;
      updatedCandidate[3]!.days = ranking.candidateFourRanking;
      updatedCandidate[4]!.days = ranking.candidateFiveRanking;
      updatedCandidate[5]!.days = ranking.candidateSixRanking;
      updatedCandidate[6]!.days = ranking.candidateSevenRanking;
      setCandidates([...updatedCandidate]);
    }
  }, [ranking, insertRanking.isLoading, insertRanking.isIdle]);
  const onRankingButtonClick = async (candidate: number, days: number) => {
    const updatedCandidate = [...candidates];
    switch (candidate) {
      case 0:
        updatedCandidate[0]!.days = days;
        break;
      case 1:
        updatedCandidate[1]!.days = days;
        break;
      case 2:
        updatedCandidate[2]!.days = days;
        break;
      case 3:
        updatedCandidate[3]!.days = days;
        break;
      case 4:
        updatedCandidate[4]!.days = days;
        break;
      case 5:
        updatedCandidate[5]!.days = days;
        break;
      case 6:
        updatedCandidate[6]!.days = days;
        break;
    }

    await insertRanking.mutateAsync({
      candidateOneRanking: candidates[0]!.days,
      candidateTwoRanking: candidates[1]!.days,
      candidateThreeRanking: candidates[2]!.days,
      candidateFourRanking: candidates[3]!.days,
      candidateFiveRanking: candidates[4]!.days,
      candidateSixRanking: candidates[5]!.days,
      candidateSevenRanking: candidates[6]!.days,
    });
    await setCandidates([...updatedCandidate]);
  };

  return (
    <>
      <Navbar />
      <Head>
        <title>Kandidat Ranking</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen bg-gradient-to-b from-green-900 to-gray-900">
        <div className="p-3">
          {candidates.map((candidate, index) => (
            <div
              key={index}
              className=" container mx-auto bg-slate-100 rounded-xl p-3 dark:bg-slate-800 mt-3 text-white border-2 border-white"
            >
              <div className="flex flex-wrap">
                <div className="flex-auto text-2xl ">{candidate.name}</div>
                <div className="flex items-center">
                  Tage:
                  {buttons.map((button) => (
                    <button
                      key={button.value}
                      className={`text-gray-30 ${
                        button.value !== candidate.days
                          ? "bg-gray-700"
                          : "bg-gray-900"
                      } hover:text-whitep px-3 py-2 ml-2 rounded-md text-sm font-bold`}
                      onClick={async () =>
                        await onRankingButtonClick(index, button.value)
                      }
                    >
                      {button.name}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default Ranking;
